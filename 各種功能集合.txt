1.先win+r
2.打regedit
3.
HKEY_CLASSES_ROOT\Directory\Background\shell 用于在文件夹背景上右键单击时显示的选项，而 
HKEY_CLASSES_ROOT\Directory\shell 用于在文件夹内部右键单击时显示的选项

shell POWERSHELL->修改資料成@shell32.dll,-8506
選POWERSHELL->新增 機碼(K) ->COMMANDL->修改資料成 cmd.exe /s /k pushd "%V"




shell POWERSHELL->修改資料成OPEN PS
選POWERSHELL->新增 機碼(K) ->COMMANDL->修改資料成  powershell -noexit -command "Set-Location -LiteralPath '%V'"



build.bat
go 處理64bit compiler的設定在進入cmd後填入
set GOARCH=amd64
go build -o sst_64bit.exe

如果要所有電腦都可以用選這個,32bit compiler的設定在進入cmd後填入
set GOARCH=386
set GOOS=windows
 go build -ldflags -H=windowsgui -o AACHIPX52IDE.exe aa51.go






noused
go build -o sst_32bit.exe


5. 執行時隱藏golang程式自己的cmd視窗：
需要有go.sum
go get github.com/amenzhinsky/go-memexec
aaa=你想要輸出的檔案名稱
xxx=你所要compiler 的檔案
 go build -ldflags -H=windowsgui -o AACHIPX52IDE.exe aa51.go
 如果要加上icon,這個還有問題不能用
go build -ldflags="-H windowsgui -linkmode internal -s -w -H=windowsgui -X main.Icon=C:\aachipx52ide\20231107aacx52\AACHIPi.ico" -o AACHIPIDE.exe aa51.go

在 Windows 上，如果你想要讓應用程式不在工作列顯示而是直接顯示在主視窗上面，你可以使用 Windows API 來設定應用程式的屬性。一種常見的方法是使用WinAPI的 SetWindowLong 函數以及 WS_EX_TOOLWINDOW 樣式來達成這個目的。

在使用 Go 語言時，你需要使用 syscall 套件，這使得可以使用操作系統的原生 API。以下是一個可能的例子，展示了如何在 Windows 上使用 Go 語言來執行此操作：

package main

import (
	"fmt"
	"syscall"
	"unsafe"
)

const (
	GWL_EXSTYLE = -20
	WS_EX_TOOLWINDOW = 0x00000080
)

var (
	procGetWindowLong = syscall.NewLazyDLL("user32.dll").NewProc("GetWindowLongW")
	procSetWindowLong = syscall.NewLazyDLL("user32.dll").NewProc("SetWindowLongW")
)

func main() {
	hWnd := syscall.GetConsoleWindow()
	if hWnd == 0 {
		fmt.Println("無法取得主視窗的 handle。")
		return
	}
	fmt.Printf("主視窗的 handle: %v\n", hWnd)

	// 取得目前的 window style
	prevStyle, _, _ := procGetWindowLong.Call(uintptr(hWnd), uintptr(GWL_EXSTYLE))

	// 設定新的 window style
	_, _, _ = procSetWindowLong.Call(uintptr(hWnd), uintptr(GWL_EXSTYLE), uintptr(prevStyle | WS_EX_TOOLWINDOW))
}

